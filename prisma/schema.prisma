// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
} 

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth ///////////////////////////////////////////////////////////////
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Necessary for Next auth ///////////////////////////////////////////////////////////////

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  shifts        Shift[]

  groups UsersInGroups[]
}

model Groups {
  id    String  @id @default(cuid())
  name  String?
  image String?

  users UsersInGroups[] 
}

model UsersInGroups {
  role      String
  
  userId    String 
  groupId   String 
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Groups @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

enum ShiftType {
  SHIFT
  REPLACEMENT
}
model Shift {
  id          String    @id @default(cuid())
  type        ShiftType @default(SHIFT)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  start       DateTime 
  end         DateTime

  @@index([userId])
}

// model Replacement {
//   id             String   @id @default(cuid())
//   requesterId    String
//   requester      User     @relation(fields: [requesterId], references: [id], name: "Requester")
//   receiverId     String
//   receiver       User     @relation(fields: [receiverId], references: [id], name: "Receiver")
//   shiftId        String
//   shift          Shift    @relation(fields: [shiftId], references: [id])
// }


// model Invitations {
//   id       String  @id @default(cuid())
//   state    String
//   group    Groups  @relation(fields: [groupId], references: [id])
//   groupId  String
// }
